{"version":3,"sources":["webpack:///src/app/account/account-routing.module.ts","webpack:///src/app/account/account.module.ts","webpack:///src/app/account/layout.component.ts","webpack:///src/app/account/layout.component.html","webpack:///src/app/account/login.component.ts","webpack:///src/app/account/login.component.html","webpack:///src/app/account/register.component.ts","webpack:///src/app/account/register.component.html"],"names":["routes","path","component","children","AccountRoutingModule","forChild","imports","exports","AccountModule","declarations","LayoutComponent","router","accountService","userValue","navigate","templateUrl","LoginComponent","formBuilder","route","alertService","loading","submitted","form","group","username","required","password","returnUrl","snapshot","queryParams","clear","invalid","login","f","value","pipe","subscribe","data","error","controls","onSubmit","RegisterComponent","firstName","lastName","minLength","register","success","keepAfterRouteChange","relativeTo"],"mappings":"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","file":"account-account-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LayoutComponent } from './layout.component';\nimport { LoginComponent } from './login.component';\nimport { RegisterComponent } from './register.component';\n\nconst routes: Routes = [\n    {\n        path: '', component: LayoutComponent,\n        children: [\n            { path: 'login', component: LoginComponent },\n            { path: 'register', component: RegisterComponent }\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AccountRoutingModule { }","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { AccountRoutingModule } from './account-routing.module';\nimport { LayoutComponent } from './layout.component';\nimport { LoginComponent } from './login.component';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        AccountRoutingModule\n    ],\n    declarations: [\n        LayoutComponent,\n        LoginComponent,\n        RegisterComponent\n    ]\n})\nexport class AccountModule { }","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AccountService } from '@app/_services';\n\n@Component({ templateUrl: 'layout.component.html' })\nexport class LayoutComponent {\n    constructor(\n        private router: Router,\n        private accountService: AccountService\n    ) {\n        // redirect to home if already logged in\n        if (this.accountService.userValue) {\n            this.router.navigate(['/']);\n        }\n    }\n}","<div class=\"col-md-6 offset-md-3 mt-5\">\n    <router-outlet></router-outlet>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '@app/_services';\n\n@Component({ templateUrl: 'login.component.html' })\nexport class LoginComponent implements OnInit {\n    form: FormGroup;\n    loading = false;\n    submitted = false;\n    returnUrl: string;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required]\n        });\n\n        // get return url from route parameters or default to '/'\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.login(this.f.username.value, this.f.password.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.router.navigate([this.returnUrl]);\n                },\n                error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                });\n    }\n}","<div class=\"card\">\n    <h4 class=\"card-header bg-info text-light\">Login</h4>\n    <div class=\"card-body\">\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n                <label for=\"username\">Username</label>\n                <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n                <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.username.errors.required\">Username is required</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                    Login\n                </button>\n                <a routerLink=\"../register\" class=\"btn btn-link\">Register</a>\n            </div>\n        </form>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AccountService, AlertService } from '@app/_services';\n\n@Component({ templateUrl: 'register.component.html' })\nexport class RegisterComponent implements OnInit {\n    form: FormGroup;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    ngOnInit() {\n        this.form = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            username: ['', Validators.required],\n            password: ['', [Validators.required, Validators.minLength(6)]]\n        });\n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        this.accountService.register(this.form.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.alertService.success('Registration successful', { keepAfterRouteChange: true });\n                    this.router.navigate(['../login'], { relativeTo: this.route });\n                },\n                error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                });\n    }\n}","<div class=\"card\">\n    <h4 class=\"card-header bg-info text-light\">Register</h4>\n    <div class=\"card-body\">\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"form-group\">\n                <label for=\"firstName\">First Name</label>\n                <input type=\"text\" formControlName=\"firstName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\n                <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"lastName\">Last Name</label>\n                <input type=\"text\" formControlName=\"lastName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\n                <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"username\">Username</label>\n                <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n                <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.username.errors.required\">Username is required</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                    <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <button [disabled]=\"loading\" class=\"btn btn-info\">\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                    Register\n                </button>\n                <a style=\"margin-left: 20px;\" routerLink=\"../login\" class=\"btn btn-danger\">Cancel</a>\n            </div>\n        </form>\n    </div>\n</div>"]}